Task 1
Переделайте тесты, которые вы написали в модуле 19 так, чтобы они использовали фикстуру получения ключа API, а не делали это каждый раз внутри себя.

Как проверить правильность выполнения? В коде тестов нет получения ключа API, при этом выполняется код фикстуры получения ключа, и тесты выполняются корректно.

Task 2
Переделайте тесты, которые вы написали в модуле 19 так, чтобы они использовали фикстуры setup и teardown.

Проверьте себя: несколько классов с тестовыми функциями используют одни и те же фикстуры setup и teardown.

Task 3
Сделайте разбиение тестов, которые у вас написаны в модуле 19, на группы.

Как себя проверить? После выполнения должно быть несколько групп функциональных тестов, которые описаны в ini файле. Есть тесты, помеченные как xfail, skip.

Task 4
Напишите декоратор, который будет логировать наши запросы в API тестах. Этим декоратором мы помечаем функции, которые отправляют запросы в тестируемое приложение.

Проверьте правильность работы скрипта по чек-листу:

- После прохождения теста на жёстком диске появляется файл log.txt, в котором две секции: в первой перечислены заголовки запроса, параметры пути, параметры строки и тело запроса; во второй — код ответа, тело ответа.
- Среди тестов есть хотя бы по одному, помеченному декораторами: @pytest.mark.xfail, @pytest.mark.skip, @pytest.mark.[<имя_пользовательской_группы>].
- В файлах проекта присутствует pytest.ini, в котором перечислены пользовательские группы из предыдущего критерия.
После запуска тестов появляется файл log.txt, который логирует запросы и ответы к сервису приложения.
- В логах секция запросов обязательно содержит: заголовки, параметры пути, параметры строки и тело запроса.
- В логах секция ответа содержит код ответа и тело ответа.